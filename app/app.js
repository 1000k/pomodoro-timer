// Generated by CoffeeScript 1.9.0
(function() {
  'use strict';

  /**
    * @ngdoc overview
    * @name pomodoroTimer
    * @description
    * # pomodoroTimer
   #
    * Main module of the application.
   */
  angular.module('pomodoroTimer', []).controller('PomodoroController', [
    '$scope', '$rootScope', '$interval', function($scope, $rootScope, $interval) {
      var AUDIOS, COUNTDOWN_RESOLUTION_MS, CYCLE_BREAK, CYCLE_WORK, NOTIFICATION_AUTO_CLOSE_DURATION_MS, Notification, TIME_BREAK_MS, TIME_WORK_MS, calcRemaingTime, currentCycle, dtDist, dtStart, init, isRunning, playAudio, remaingTimeMs, setTargetTime, showNotification, stopPromise, tick, toggleCycle, updateBackground, updateTimerDisplay;
      TIME_WORK_MS = 1500000;
      TIME_BREAK_MS = 300000;
      CYCLE_WORK = 'work';
      CYCLE_BREAK = 'break';
      COUNTDOWN_RESOLUTION_MS = 100;
      NOTIFICATION_AUTO_CLOSE_DURATION_MS = 15000;
      AUDIOS = {
        START: 'assets/audio/start.m4a',
        PAUSE: 'assets/audio/pause.m4a',
        WORK: 'assets/audio/work.m4a',
        BREAK: 'assets/audio/break.m4a'
      };
      stopPromise = void 0;
      currentCycle = void 0;
      dtStart = dtDist = void 0;
      remaingTimeMs = 0;
      isRunning = false;
      Notification = window.Notification || window.mozNotification || window.webkitNotification;
      if (Notification && Notification.permission !== 'granted') {
        Notification.requestPermission(function(permission) {});
      }
      showNotification = function(msg) {
        var instance;
        if (Notification && Notification.permission === 'granted') {
          instance = new Notification("Time Expired", {
            body: msg,
            icon: "data:image/pngbase64,iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADe0lEQVRYR61X23XaQBAFm//YFYRUEKggwphvOxUEKgiuwLgC4wqCKwh884iowKQDUkHg34bcu2dGZ7RaCSmJztGRtDuze+fOY0f1WuC6vr4eYvgL7pZMx8fjcbpcLp9C8v6Y6N9gPJK5DfTH0H/2Zet2IIqii0aj8cNs7MtvXl9fO3Ec70JA/kY/BaDb7W7q9frHAitnmBsvFos4hzlaTPZofd61gX5bJxMAQtujrwXqfuEeHQ6HaZ7lvg6ZODs7u8U9xtw7fx5rDVar1YTjCYAc6x9A+Vg37vV6LYDR2LgwrtrgnW6JweBsPp/zuyYuISP3HoiEBcvA0QjtsVCkC11dXfXxfY+7WUBtMgWQW3yMNOgEON2WsAE3uL0zAKD88+3tLaLVsKCJoPxGYwIb7zHmLBUmMlSTETA4wFpbsnF+fk6GXIyFABBhCwpNbo6YiADmOxRItV5r+G8Sigfj9z6EP6kC1tghFjpkUwwiaLrAGWVjgEGzpSA3xxzT0V1kBUCGedHvsyPgxzaj8N7m2nQHDGjCPdMUAF2EKEHVi1qOzZ/hkmHZDDDrkHKCYNDSiB3WadMdFnCqDnAC6OkKRyE3B1JSmrkg54JWfRmS4Riya6Ig8BlDvpMLgNEONzDoHO0ajP8CwA8+rPtZ6c+4AGi3QPteNuwU+bwsA8JqhKeLKaYoAHxQoxIXSK6+yMRaozSP2ioAfNdqQKYYgPUMmK8ctKXyfwGw7sWaDzBwlAJggw+14PJU1FdlQMryb5/h0FmwBzpbfIIkVAUgbuB5wYpZeBac9L8sVioNLXrLcu5ZAIVKAPJiJFQfCgHoccyKhTS5zFtYx9UFFQE4F7DGYA/X7tnTMMa3q4BlgvAUQH++TBBWSsOqAE6moVeIMjW76oa+vPV/sBBRoUoprgLIHu/sMeH/puqnTkOPpsIWvCwAv1UvPIwkv5NghPAEaAdlNwvJecdxJsUz/YBpm1yPRxA4lu9OleZQ1KMheYS/+zK3R3a1TjYkwkKEZ9KS4Z193F2Vlgzy/MfQX7uaDTwLNsOATkrgsG+z3S7/EcnIzGdEGo8bsZgG6JVq8X2mcgFQUNwxwWvS5eoCrJjYzLXleG953bOKrUF736e9FANWSH5MRqZbCsVbMsZUw8fQtl55CoUM+EpSrG5JDja50LZb2nb9NZvqH1UhSpn8AzxCRT9SmYAVAAAAAElFTkSuQmCC"
          });
          instance.onshow = function() {
            return setTimeout(function() {
              return instance.close();
            }, NOTIFICATION_AUTO_CLOSE_DURATION_MS);
          };
        }
        return false;
      };
      playAudio = function(audioType) {
        return new Audio(audioType).play();
      };
      updateBackground = function(cycle) {
        return $scope.cycleColor = "cycle-" + cycle;
      };
      updateTimerDisplay = function(ms, cycle) {
        var min, sec, timerDisplay;
        min = Math.floor(ms / 1000 / 60);
        sec = Math.floor(ms / 1000 % 60);
        timerDisplay = ms < 0 ? '00:00' : timerDisplay = ('00' + min).substr(-2) + ':' + ('00' + sec).substr(-2);
        $scope.indicator = {
          cycle: cycle,
          time: timerDisplay
        };
        $rootScope.title = cycle + " " + timerDisplay;
        return timerDisplay;
      };
      toggleCycle = function() {
        currentCycle = currentCycle === CYCLE_WORK ? CYCLE_BREAK : CYCLE_WORK;
        switch (currentCycle) {
          case CYCLE_WORK:
            showNotification('Get back to work.');
            playAudio(AUDIOS.WORK);
            setTargetTime(TIME_WORK_MS);
            break;
          default:
            showNotification('Have a break.');
            playAudio(AUDIOS.BREAK);
            setTargetTime(TIME_BREAK_MS);
        }
        updateBackground(currentCycle);
        return tick();
      };
      setTargetTime = function(intervalMs) {
        dtStart = new Date();
        return dtDist = new Date(dtStart.getTime() + intervalMs);
      };
      calcRemaingTime = function() {
        return dtDist.getTime() - Date.now();
      };
      tick = function() {
        remaingTimeMs = calcRemaingTime();
        return updateTimerDisplay(remaingTimeMs, currentCycle);
      };
      init = function() {
        isRunning = false;
        currentCycle = CYCLE_WORK;
        updateBackground('stop');
        remaingTimeMs = TIME_WORK_MS;
        return updateTimerDisplay(remaingTimeMs, currentCycle);
      };
      $scope.runPomodoro = function() {
        updateBackground(currentCycle);
        if (angular.isDefined(stopPromise)) {
          return;
        }
        if (!isRunning) {
          setTargetTime(TIME_WORK_MS);
          isRunning = true;
        }
        playAudio(AUDIOS.START);
        return stopPromise = $interval(function() {
          if (remaingTimeMs > 0) {
            return tick();
          } else {
            return toggleCycle();
          }
        }, COUNTDOWN_RESOLUTION_MS);
      };
      $scope.pausePomodoro = function() {
        if (angular.isDefined(stopPromise)) {
          $interval.cancel(stopPromise);
          stopPromise = void 0;
          playAudio(AUDIOS.PAUSE);
          return updateBackground('stop');
        }
      };
      $scope.resetPomodoro = function() {
        $scope.pausePomodoro();
        return init();
      };
      $scope.$on('$destroy', function() {
        return $scope.pausePomodoro();
      });
      return $scope.$watch('$viewContentLoaded', function() {
        return init();
      });
    }
  ]).directive('ptIndicator', function() {
    return {
      restrict: 'E',
      scope: {
        indicator: '='
      },
      templateUrl: 'app/indicator.tpl.html'
    };
  });

}).call(this);
